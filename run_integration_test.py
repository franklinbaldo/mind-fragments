import os
import json
import sys

# Adjust the Python path to include the directory where modules are located,
# assuming run_integration_test.py is in the same directory as the other .py files.
# This is often needed if you're running scripts from a top-level directory in a simple project structure.
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    import fetch_drive_activity
    import llm_interaction
except ModuleNotFoundError:
    print("ERROR: Ensure 'fetch_drive_activity.py' and 'llm_interaction.py' are in the same directory as this script,")
    print("or adjust sys.path if they are located elsewhere.")
    sys.exit(1)

# Configuration
DRIVE_ACTIVITY_FILE = 'google_drive_activity.json'
LLM_OUTPUT_FILE = 'llm_processed_sample_output.txt'
CREDENTIALS_FILE = 'credentials.json' # Expected by fetch_drive_activity.py
TOKEN_FILE = 'token.json' # Generated by fetch_drive_activity.py

def check_prerequisites():
    """Checks for necessary files and environment variables."""
    print("--- Checking Prerequisites ---")
    all_ok = True
    if not os.path.exists(CREDENTIALS_FILE):
        print(f"ERROR: Google Drive credentials file ('{CREDENTIALS_FILE}') not found.")
        print("Please download it from Google Cloud Console and place it in this directory.")
        all_ok = False
    else:
        print(f"Found '{CREDENTIALS_FILE}'.")

    gemini_api_key = os.getenv("GEMINI_API_KEY")
    if not gemini_api_key:
        print("ERROR: GEMINI_API_KEY environment variable not set.")
        print("Please set this environment variable with your Google Generative AI API key.")
        all_ok = False
    else:
        print("Found 'GEMINI_API_KEY' environment variable.")
    
    print("--- Prerequisites Check Complete ---")
    return all_ok, gemini_api_key

def main_integration():
    """
    Runs the integration test:
    1. Fetches Google Drive activity.
    2. Selects the first file.
    3. If it's a Google Doc, fetches its content.
    4. Processes the content (or metadata) with an LLM.
    5. Saves and prints the LLM output.
    """
    print("Starting integration test...")

    prerequisites_ok, gemini_api_key = check_prerequisites()
    if not prerequisites_ok:
        print("\nPlease address the missing prerequisites and try again.")
        return

    # 1. Run fetch_drive_activity.py's main function to get Drive activity
    print(f"\n--- Running Google Drive Activity Fetcher ---")
    print(f"This will attempt to authenticate and create/update '{TOKEN_FILE}' and '{DRIVE_ACTIVITY_FILE}'.")
    print("Follow any on-screen prompts for Google authentication if it's your first time or token is invalid.")
    try:
        fetch_drive_activity.main() # This will print its own status messages
    except Exception as e:
        print(f"ERROR: An exception occurred while running 'fetch_drive_activity.main()': {e}")
        print("Please ensure Google Drive API setup is correct and 'credentials.json' is valid.")
        return
    
    if not os.path.exists(DRIVE_ACTIVITY_FILE):
        print(f"ERROR: '{DRIVE_ACTIVITY_FILE}' was not created. Cannot proceed.")
        return
    print(f"--- Google Drive Activity Fetcher Finished ---")

    # 2. Read the drive activity JSON
    print(f"\n--- Reading Drive Activity from '{DRIVE_ACTIVITY_FILE}' ---")
    try:
        with open(DRIVE_ACTIVITY_FILE, 'r', encoding='utf-8') as f:
            drive_files = json.load(f)
    except FileNotFoundError:
        print(f"ERROR: '{DRIVE_ACTIVITY_FILE}' not found even after running the script. This should not happen.")
        return
    except json.JSONDecodeError:
        print(f"ERROR: Could not decode JSON from '{DRIVE_ACTIVITY_FILE}'.")
        return
    
    if not drive_files:
        print("No files found in Google Drive activity. Nothing to process with LLM.")
        return
    print(f"Found {len(drive_files)} items in Drive activity.")

    # 3. Select the first file and get its content or metadata
    first_file_metadata = drive_files[0]
    file_id = first_file_metadata.get('id')
    file_name = first_file_metadata.get('name', 'Unnamed File')
    mime_type = first_file_metadata.get('mimeType')
    
    print(f"\n--- Selecting First File for LLM Processing ---")
    print(f"File Name: {file_name}")
    print(f"File ID: {file_id}")
    print(f"MIME Type: {mime_type}")

    text_to_process = f"File Name: {file_name}\nMIME Type: {mime_type}\nModified Time: {first_file_metadata.get('modifiedTime')}" # Default text

    if mime_type == 'application/vnd.google-apps.document':
        print(f"'{file_name}' is a Google Document. Attempting to fetch its content as plain text...")
        # Need an authenticated drive service
        drive_service = fetch_drive_activity.get_authenticated_drive_service()
        if drive_service:
            doc_content = fetch_drive_activity.get_google_doc_content_as_text(drive_service, file_id)
            if doc_content:
                print(f"Successfully fetched content for '{file_name}'.")
                text_to_process = doc_content
            else:
                print(f"Could not fetch content for Google Doc '{file_name}'. Using its metadata as text for LLM.")
        else:
            print("Could not get authenticated Google Drive service to fetch document content. Using metadata.")
    elif mime_type in ['application/vnd.google-apps.spreadsheet', 'application/vnd.google-apps.presentation']:
        print(f"'{file_name}' is a Google {mime_type.split('.')[-1]}. Content export for this type as plain text is not yet robustly implemented in this test.")
        print("Using its metadata as text for LLM. Consider enhancing 'get_google_doc_content_as_text' or adding new export functions.")
        # For now, text_to_process remains metadata.
    else: # Other file types (PDFs, images, etc.)
        print(f"'{file_name}' is not a native Google Doc. Direct content fetching for type '{mime_type}' is not implemented in this script.")
        print("Using its metadata as text for LLM.")
        # For now, text_to_process remains metadata.

    # 4. Process with LLM
    print(f"\n--- Sending Text to LLM for Processing ---")
    print("Original text sample being sent to LLM (first 500 chars if long):")
    print("--------------------------------------------------")
    print(text_to_process[:500] + "..." if len(text_to_process) > 500 else text_to_process)
    print("--------------------------------------------------")

    if not gemini_api_key: # Should have been caught by prerequisites, but double check
        print("CRITICAL ERROR: GEMINI_API_KEY is missing. Cannot proceed with LLM.")
        return

    llm_output = llm_interaction.process_text_with_llm(text_to_process, gemini_api_key)

    print("\n--- LLM Processed Output ---")
    print(llm_output)
    print("--- End of LLM Output ---")

    # 5. Save LLM output
    try:
        with open(LLM_OUTPUT_FILE, 'w', encoding='utf-8') as f:
            f.write(llm_output)
        print(f"\nLLM output saved to '{LLM_OUTPUT_FILE}'")
    except IOError as e:
        print(f"Error saving LLM output to file: {e}")

    print("\n--- Integration Test Finished ---")
    print(f"Please review '{LLM_OUTPUT_FILE}' for relevance, PII removal, and overall quality.")
    print("Provide this feedback for the next steps of the project.")

if __name__ == '__main__':
    main_integration()
