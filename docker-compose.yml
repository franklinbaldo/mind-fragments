version: '3.8'

services:
  n8n:
    image: n8nio/n8n
    restart: always
    ports:
      - "5678:5678"
    environment:
      - N8N_HOST=0.0.0.0
      - N8N_PORT=5678
      - GENERIC_TIMEZONE=${GENERIC_TIMEZONE:-Europe/Berlin}
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY:-replace_this_with_a_strong_encryption_key}
      # The following line allows n8n's Execute Command node to run scripts
      # in the puppeteer_runner container using 'docker exec'.
      # This requires the Docker socket to be mounted into the n8n container.
      # Make sure to understand the security implications of this.
      - DOCKER_HOST=unix:///var/run/docker.sock
      # Variables for connecting to a Browserless instance (if you choose that route later)
      # BROWSERLESS_URL=ws://puppeteer_runner:3000 # if puppeteer_runner was browserless/chrome
    volumes:
      - n8n_data:/home/node/.n8n
      # Mount Docker socket to allow n8n to execute 'docker exec' commands
      # SECURITY WARNING: This gives the n8n container root-level access to the Docker daemon.
      # Only do this if you trust the n8n instance and its workflows.
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - social_automation_net
    depends_on:
      - puppeteer_runner

  puppeteer_runner:
    image: buildkite/puppeteer:10.0.0 # Includes Node.js, Puppeteer, and Chrome
    container_name: puppeteer_runner_container # Fixed name for easier `docker exec`
    restart: always
    working_dir: /usr/src/app
    # Mount your Puppeteer scripts into this container
    # The 'scripts' subdirectory will be created in your project root if it doesn't exist.
    volumes:
      - ./puppeteer_scripts:/usr/src/app/scripts
    # Keep the container running so N8N can exec into it
    command: tail -f /dev/null
    networks:
      - social_automation_net

volumes:
  n8n_data: {} # Use {} for default driver, or specify your driver

networks:
  social_automation_net:
    driver: bridge
